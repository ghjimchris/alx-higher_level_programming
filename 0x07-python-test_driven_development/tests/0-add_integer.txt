0-add_integer

def add_integer(a, b=98) defines the addition of two integers

	>>> add_integer = __import__('0-add_integer').add_integer

Works with positive integers

	>>> add_integer(5, 10)
	15

Or negative integers

	>>> add_integer(-2, -2)
	-4
	>>> add_integer(100, -2)
	98

Float numbers will be treated as int
	
	>>> add_integer(2.0, 2.0)
	4
	>>> add_integer(-1.5, -2.5)
	-3
	>>> add_integer(1, 3.14)
	4

If one argument is missing value b will be as default (98)

	>>> add_integer(2)
	100
	>>> add_integer(-1)
	97

If there are no argument given or more than two arguments, an error is raise

	>>> add_integer(1, 2, 3)
	Traceback (most recent call last):
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'

If one of the argument is not an int or float

	>>> add_integer(2, "Hello")
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> add_integer("Hello", 2)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(hello)
	Traceback (most recent call last):
       	NameError: name 'hello' is not defined

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(float('inf'), 7)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

	>>> add_integer(float('nan'), 10)
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
